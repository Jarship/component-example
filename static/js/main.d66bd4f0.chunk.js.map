{"version":3,"sources":["functions/grabImage.js","components/card.jsx","components/text.jsx","components/full-width-content.jsx","components/container.jsx","components/image.jsx","components/logo-carousel.jsx","components/component-title.jsx","App.js","serviceWorker.js","theme.js","index.js"],"names":["grabImage","width","height","Card","styled","div","color","space","label","Text","p","typography","FullWidthContent","flexbox","Container","defaultProps","px","mx","Image","img","compose","layout","border","position","maxWidth","Slide","item","alignment","name","description","background","image","Math","floor","random","backgroundColor","src","alt","textAlign","SliderFreeContainer","LogoCarousel","props","logoItems","settings","infinite","arrows","slidesToShow","slidesToScroll","dots","nextArrow","prevArrow","responsive","breakpoint","bg","Array","isArray","length","map","idx","key","ComponentTitle","h2","py","fontSize","lineHeight","fontFamily","fontWeight","my","LogoItems","App","Boolean","window","location","hostname","match","breakpoints","globalStyles","ReactDOM","render","styles","css","StrictMode","theme","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d66bd4f0.chunk.js","sourcesContent":["const grabImage = (width, height) => {\n  return `http://placekitten.com/${width}/${height}`;\n};\n\nexport default grabImage;","import { color, space } from 'styled-system';\nimport styled from '@emotion/styled';\n\nconst Card = styled.div(\n  () => `\n    border-width: 0px;\n    position: relative;\n    display: flex;\n    flex-direction: column;\n    box-sizing: border-box;\n    border-radius: 0.25rem;\n  `,\n  color,\n  space,\n  {\n    label: 'Card'\n  }\n);\n\nexport default Card;","import { color, space, typography } from 'styled-system';\nimport styled from '@emotion/styled';\n\nconst Text = styled.p(\n  `\n    font-family: 'Josefin Sans', sans-serif;\n  `,\n  color,\n  space,\n  typography\n);\n\nexport default Text;","import { color, space, flexbox } from 'styled-system';\nimport styled from '@emotion/styled';\n\nconst FullWidthContent = styled.div(\n  `\n  `,\n  color,\n  space,\n  flexbox\n);\n\nexport default FullWidthContent;","import { color, space } from 'styled-system';\nimport styled from '@emotion/styled';\n\nconst Container = styled.div(\n  `\n    width: 100%;\n    @media (min-width: 1200px) {\n      max-width: 1140px;\n    }\n    @media (min-width: 992px) {\n      max-width: 960px;\n    }\n    @media (min-width: 768px) {\n      max-width: 720px;\n    }\n    @media (min-width: 576px) {\n      max-width: 540px;\n    }\n  `,\n  color,\n  space\n);\n\nContainer.defaultProps = {\n  px: '15px',\n  mx: 'auto'\n};\n\nexport default Container;","import { layout, space, flexbox, border, position, compose } from 'styled-system';\nimport styled from '@emotion/styled';\n\nconst Image = styled.img(\n  `\n    vertical-align: middle;\n    border-style: none;\n  `,\n  compose(\n    layout,\n    space,\n    flexbox,\n    border,\n    position\n  )\n);\n\nImage.defaultProps = {\n  maxWidth: '100%',\n  height: 'auto'\n};\n\nexport default Image;","import React from \"react\";\nimport styled from \"@emotion/styled\";\n\nimport grabImage from \"../functions/grabImage\";\nimport Slider from 'react-slick';\nimport Card from './card';\nimport Text from './text';\nimport FullWidthContent from './full-width-content';\nimport Container from './container';\nimport Image from './image';\n\nconst Slide = ({ item: { alignment, name, description }, background }) => {\n  const image = grabImage(400 + Math.floor((Math.random() * 10)), 200 + Math.floor((Math.random() * 10)));\n  return (\n    <Card px=\"15px\" backgroundColor={background === \"Light\" ? \"white\" : \"#25282A\"}>\n      <Image src={image} alt={name + \" the kitten\"} />\n      <Text textAlign={alignment} color={background === \"Light\" ? \"#25282A\" : \"white\"}>{description}</Text>\n    </Card>\n  );\n\n}\n\nconst SliderFreeContainer = styled.div`\ndisplay: flex;\nflex-direction: column;\nwidth: 100%;\n@media screen and (min-width: 920px) {\n  flex-direction: row;\n}\n`;\n\nconst LogoCarousel = props => {\n  const { background, logoItems } = props;\n  const settings = {\n    infinite: true,\n    arrows: true,\n    slidesToShow: 3,\n    slidesToScroll: 1,\n    dots: false,\n    nextArrow: <img src={`/component-example/icons/chevron-right-${background === \"Light\" ? \"dark\" : \"light\"}.svg`} alt=\"next-kitten\" />,\n    prevArrow: <img src={`/component-example/icons/chevron-left-${background === \"Light\" ? \"dark\" : \"light\"}.svg`} alt=\"prev-kitten\" />,\n    responsive: [\n      {\n        breakpoint: 767,\n        settings: {\n          slidesToShow: 1,\n          arrows: false,\n          dots: true,\n        }\n      }\n    ]\n  };\n  return (\n    <FullWidthContent p=\"4rem 2rem\" bg={background === \"Light\" ? \"white\" : \"#25282A\"}>\n      <Container bg={background === \"Light\" ? \"white\" : \"#25282A\"}>\n        {logoItems && Array.isArray(logoItems) && logoItems.length > 3 ? (\n            <Slider {...settings}>\n              {logoItems.map((item, idx) => (\n                  <Slide item={item} key={`Kitten-slide-${idx}`} background={background} />\n              ))}\n            </Slider>\n          ) : logoItems && Array.isArray(logoItems) && (\n            <SliderFreeContainer>\n              {logoItems.map((item, idx) => (\n                <Slide key={`Kitten-${idx}`} item={item} background={background} />\n              ))}\n            </SliderFreeContainer>\n          )}\n      </Container>\n    </FullWidthContent>\n  );\n};\n\nexport default LogoCarousel;\n","import { color, typography, space } from 'styled-system';\nimport styled from '@emotion/styled';\n\nconst ComponentTitle = styled.h2(\n  `\n    text-transform: uppercase;\n  `,\n  color,\n  typography,\n  space\n);\n\nComponentTitle.defaultProps = {\n  textAlign: 'center',\n  py: '3rem',\n  px: '0.5rem',\n  fontSize: '2.5rem',\n  lineHeight: '2.3rem',\n  fontFamily: `'Krona One', sans-serif`,\n  fontWeight: 600,\n  color: '#25282a',\n  my: 0\n};\n\nexport default ComponentTitle;","import React from 'react';\nimport { ComponentTitle, LogoCarousel} from \"./components\";\n\n\nconst LogoItems = [\n  {\n    alignment: \"center\",\n    name: \"Mittens\",\n    description: \"Mittens is a great kitten! Mittens loves to play with other kittens.\"\n  },\n  {\n    alignment: \"center\",\n    name: \"Fluffy\",\n    description: \"Fluffy is a great kitten! Fluffy works hard and plays hard!\"\n  },\n  {\n    alignment: \"center\",\n    name: \"Roscoe\",\n    description: \"Roscoe is a great kitten! Roscoe likes to play fetch with his little ball.\"\n  },\n  {\n    alignment: \"center\",\n    name: \"Avery\",\n    description: \"Avery is a great kitten! Avery likes to give love nibbles, and then lots of kisses.\"\n  }\n]\n\nfunction App() {\n  return (\n    <>\n      <ComponentTitle bg=\"#f6f4f3\">Light Kitten Carousel</ComponentTitle>\n      <LogoCarousel background=\"Light\" logoItems={LogoItems} />\n      <ComponentTitle bg=\"#f6f4f3\">Dark Kitten Carousel</ComponentTitle>\n      <LogoCarousel background=\"Dark\" logoItems={LogoItems} />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export const breakpoints = ['320px', '576px', '768px', '992px', '1200px'];\n\nexport const globalStyles = `\nhtml,\nbody,\n#root {\n  min-width: ${breakpoints[0]};\n  min-height: 100vh;\n  border: 0;\n  margin: 0;\n  padding: 0;\n  background: white;\n\n  * {\n    box-sizing: border-box;\n  }\n}\n\n.slick-slider {\n  width: 100%;\n  position: relative;\n  box-sizing: border-box;\n  user-select: none;\n  touch-action: pan-y;\n  -webkit-tap-hightlight-color: transparent;\n}\n.slick-list {\n  position: relative;\n  display: block;\n  overflow: hidden;\n  margin: 0;\n  padding: 0;\n}\n.slick-track {\n  position: relative;\n  top: 0;\n  left: 0;\n  display: block;\n  margin-left: auto;\n  margin-right: auto;\n}\n.slick-slide {\n  display: block;\n  border-radius: 5px;\n  float: left;\n  height: 100%;\n  min-height: 1px;\n}\n.slick-prev,\n.slick-next {\n  font-size: 0;\n  line-height: 0;\n  position: absolute;\n  top: 50%;\n  width: 20px;\n  height: 20px;\n  padding: 0;\n  transform: translate(0, -50%);\n  cursor: pointer;\n  color: transparent;\n  border: none;\n  outline: none;\n  background: transparent;\n}\n.slick-prev {\n  left: -25px;\n}\n.slick-next {\n  right: -25px;\n}\n.slick-dots {\n  position: absolute;\n  bottom: -25px;\n  width: 100%;\n  padding: 0;\n  margin: 0;\n  list-style: none;\n  text-align: center;\n  justify-content: center;\n  display: flex;\n}\n.slick-dots li {\n  position: relative;\n  display: inline-block;\n  width: 20px;\n  height: 20px;\n  margin: 0 5px;\n  padding: 0;\n  cursor: pointer;\n}\n.slick-dots button {\n  width: 0.1rem;\n  height: 0.1rem;\n  padding: 3px;\n  border-radius: 100%;\n  text-indent: -9999px;\n}\n.slick-dots li button {\n  font-size: 0;\n  line-height: 0;\n  display: block;\n  cursor: pointer;\n  color: transparent;\n  outline: none;\n  background: transparent;  \n  border: 1px solid #6f6f6f;\n}\n.slick-dots li.slick-active button {\n  border: 1px solid #d95e16;\n  background-color: #d95e16;\n}\n\n@media screen and (min-width: 1200px) {\n  .slick-list {\n    left: 0px;\n  }\n}\n.slick-slider .slick-list {\n  transform: translate3d(0, 0, 0);\n}\n`;\n\nexport default {\n  breakpoints\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { Global, css } from '@emotion/core';\nimport { ThemeProvider } from 'emotion-theming';\nimport * as serviceWorker from './serviceWorker';\nimport theme, { globalStyles } from './theme';\n\nReactDOM.render(\n  <>\n    <Global\n        styles={css`\n        ${globalStyles}\n        `}\n      />\n    <React.StrictMode>\n      <ThemeProvider theme={theme}>\n        <App />\n      </ThemeProvider>\n    </React.StrictMode>\n  </>\n  ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}